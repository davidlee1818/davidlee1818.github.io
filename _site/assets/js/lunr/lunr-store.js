var store = [{
        "title": "搭建博客之第一天",
        "excerpt":"       在本页上     第一篇博客           坑点       解决ubuntu各种黑屏                   方法一           方法二                       更换gems国内源       安装jekyll和theme的依赖                第一篇博客  为了用个jekyll模板，ubuntu折腾了一天。中间遇到一些bug贼痛苦，记录下来也许对别人有点用处。  坑点     Ubuntu各种黑屏   速度拉跨的gems源   bundle install 提示找不到openssl                                                                                                                                This is a sample gallery to go along with this case study.       解决ubuntu各种黑屏  方法一  $&gt; vim /etc/default/grub    增加nomodeset到GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash nomodeset\"    $&gt; sudo update-grub    $&gt; sudo reboot\t  这个方法禁止虚拟机检测显卡，设置后屏幕可能很难看。   方法二  管理员cmd&gt; netsh winsock reset     将winsock的目录重置为默认的设置状态。虚拟机与主机之间的通信方式是以socket进行的。 可能会因为某个程序通过LSP注入DLL,导致回收不彻底。影响虚拟的运行。因此需要进行这些注入DLL的残留清理重置。 这个方法虚拟机显示效果更好，但是会重置防火墙设置 hosts文件变成只读。  没用！！ 事实上虚拟机重启它就黑屏，宿主机重启才能正常进入虚拟机可视化界面，尝试调整虚拟机显示可用内存试试。    另外，有可能之前安装就一直黑屏，如果是vmware 建议用原生的模拟磁盘安装（选稍后自行安装），自动安装贼坑。 卡在retrieving file 可以 skip 不然等一年！    更换gems国内源  $&gt; gem sources -l     $&gt; gem sources -r   //加上上面的干掉官方源     $&gt; gem sources -a 'https://gems.ruby-china.com'  //目前可用的国内源     另外gem在update 或者 bundle install的时候 也会使用默认源。     $&gt; bundle config 'mirror.https://rubygems.org' 'https://gems.ruby-china.com' 会在你 ~/.bundle 生成对应配置文件，而不需要去改Gemfile     安装jekyll和theme的依赖  这个坑奇坑无比！！  明明安装了openssl，他就是找不到你气不气    $&gt; sudo gem install eventmachine -v \\'1.2.7\\' \\-\\-source \\'https://gems.ruby-china.com\\' \\-\\- \\-\\-with-cppflags=-I/usr/local/opt/openssl/include  参数设置也是贼坑，看帮助完全没用！！ 注意 两个'--'不能少 还有空格。 模板用的github mmistakes大佬的jekyll-theme-skinny-bones，装完ruby、rubygem、bundle 之后，解压大佬的zip包 bundle install 安装好 jekyll 就可以自己写博客啦！！    编译: $&gt;bundle exec jekyll build      开启服务器: $&gt;bundle exec jekyll serve      默认本机 127.0.0.0:4000  绑定的本机内网 宿主机进不去的。   tips：有些时候需要强制jekyll生产模式下运行，用来开启一些功能 比如：评论 等。  $&gt; JEKYLL_ENV=production bundle exec jekyll build  makedown还不熟估计版式贼丑。   模板换成大佬最新的 minimal-mistakes。   ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/build-blog/first-day/",
        "teaser": "http://localhost:4000/assets/images/unsplash-gallery-image-1-th.jpg"
      },{
        "title": "搭建博客之第二天",
        "excerpt":"       在本页上     博客实现评论及验证           流程原理：       建一个bot账号（普通账号）用户       google recaptcha实验验证功能       通过heroku实现私人staticman服务                博客实现评论及验证  大佬帖子先贴上 点这    流程原理：     客户端网页渲染器通过post请求提交评论表单，js附加表单信息提交到运行在Heroku上的staticman (API bridge).   云端staticman保持着一份local git-repo(第一次是从你的blog-repo clone 到本地的)。   收到评论时会同步到bot账号的github仓库,并发起pull请求到你的博客仓库，然后需要博客账号同意merge。    当你同意merge之后，会立即触发github pages立即更新并发布你的网页内容(这是github pages的特性)，刷新后评论立刻就会出现。   建一个bot账号（普通账号）用户  为了能实现上述流程，因此需要用你的博客账号把bot账号拉到协作者团队中，允许bot修改你的博客仓库。   同时生成github Personal access tokens,勾选repo和users scope.   google recaptcha实验验证功能  https://www.google.com/recaptcha/admin 翻墙注册博客域名 拿到sitekey和screte   sitekey:在您的网站提供给用户的 HTML 代码中使用此网站密钥。  screte:此密钥用于您的网站和 reCAPTCHA 之间的通信(staticman 还会对它再加密)    //使用之前部署在heroku的staticman加密recaptcha的screte https://${bridge_app_name}.herokuapp.com/v2/encrypt/{$recaptcha-site-secret}  将sitekey和加密后screte正确设置到jekyll的_config.yml中。 记得将html中的goog recaptcha中的js源改成国内的，不然无法通过验证（被墙了）。 将www.google.com改成www.recaptcha.net   通过heroku实现私人staticman服务  这个网站是真厉害，你可以部署你的服务在上面实时运行，甚至可以自定义pipline，统计分析、机器学习都能用得上。 现在你要为staticman添加参数配置：     在本机生成rsa密钥对，staticman会用公钥来加密你的reCAPTCHA screte的公共部分，之后使用私钥进行解密。   登录heroku的cli，可以使用web端设置，也可以下载heroku的client登录。cli设置如下：     //staticman无法处理换行,需要处理掉\\\"\\n\\\" 和 / heroku config:add --app ${bridge_app_name} \"RSA_PRIVATE_KEY=$(cat ~/.ssh/staticman_key | tr -d '\\n')\" heroku config:add --app ${bridge_app_name} \"GITHUB_TOKEN=${github_token}\" heroku config --app ${bridge_app_name} //验证参数设置是否正确           邀请bot账户至协作者团队 blog-repo -&gt; Settings -&gt; manage access -&gt; invate a collaborator     //浏览器中输入以下地址, ${bridge_app_name}是你heroku上的应用名 后两个参数你是博客的用户名和仓库名 https://${bridge_app_name}.herokuapp.com/v2/connect/${github-username}/${blog-repo}          当出现OK！就说明邀请成功了(只会显示一次，之后再刷新就会提示邀请找不到)，事实上你也可以手动通过bot账号的邮件同意邀请。 不过通过heroku同意也证明了我们之前的设置是有效的。       现在你的博客就可以实现评论功能了！！！   ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/build-blog/second-day/",
        "teaser": "http://localhost:4000/assets/images/unsplash-gallery-image-2-th.jpg"
      },]
